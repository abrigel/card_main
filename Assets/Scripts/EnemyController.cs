using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyController : MonoBehaviour
{
    public GameObject cardPrefab;
    public Transform handZone;
    public Transform attackZone;
    public Transform defenseZone;

    public int mana = 0;
    public int maxMana = 10;
    public int hp = 30;

    private List<GameObject> hand = new List<GameObject>();
    private int maxHandSize = 5;
    public static EnemyController Instance;

    private bool hasAttackedThisTurn = false; // –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–¥–Ω–æ–π –∞—Ç–∞–∫–∏ –∑–∞ —Ö–æ–¥

    private void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);
    }

    public void StartTurn()
    {
        Debug.Log("–í—Ä–∞–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ö–æ–¥!");

        hasAttackedThisTurn = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ö–æ–¥–∞
        mana = Mathf.Min(mana + 2, maxMana);

        DrawCards(5 - hand.Count);

        Invoke(nameof(PlayCards), 1f);
    }

    private void DrawCards(int count)
    {
        for (int i = 0; i < count; i++)
        {
            GameObject card = Instantiate(cardPrefab, handZone.position, Quaternion.identity, handZone);
            card.GetComponent<CardData>().GenerateRandomStats();
            hand.Add(card);
        }
    }

    private void PlayCards()
    {
        List<GameObject> cardsToPlay = new List<GameObject>();

        foreach (GameObject cardObj in hand)
        {
            CardData card = cardObj.GetComponent<CardData>();
            if (card.manaCost <= mana)
            {
                Transform zone = Random.value > 0.5f ? attackZone : defenseZone;
                cardObj.transform.SetParent(zone);
                //card.owner = Owner.Enemy; // üëà (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!)

                mana -= card.manaCost;
                cardsToPlay.Add(cardObj);
            }
        }

        foreach (var playedCard in cardsToPlay)
            hand.Remove(playedCard);

        // –ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è ‚Äî –∫—Ä–∞—Å–∏–≤–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã
        ArrangeCards(attackZone);
        ArrangeCards(defenseZone);

        Invoke(nameof(AttackPlayer), 1f);
    }

    private void ArrangeCards(Transform zone)
    {
        int count = zone.childCount;
        float spacing = 0.15f; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
        float startX = -(spacing * (count - 1)) / 2f; // –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É

        for (int i = 0; i < count; i++)
        {
            Transform card = zone.GetChild(i);
            Vector3 targetPos = new Vector3(0, 0, startX + spacing * i);
            card.localPosition = targetPos;
        }
    }

    private void AttackPlayer()
    {
        if (hasAttackedThisTurn)
        {
            Debug.Log("–í—Ä–∞–≥ —É–∂–µ –∞—Ç–∞–∫–æ–≤–∞–ª –≤ —ç—Ç–æ–º —Ö–æ–¥—É!");
            Invoke(nameof(EndTurn), 1f);
            return;
        }

        var player = GameManager.Instance.player;

        foreach (Transform enemyCardTransform in attackZone)
        {
            var attacker = enemyCardTransform.GetComponent<CardData>();
            if (attacker != null && !attacker.hasAttackedThisTurn)
            {
                CardData target = null;

                // –ò—â–µ–º –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É —É –∏–≥—Ä–æ–∫–∞
                foreach (Transform def in player.defenseZone)
                {
                    target = def.GetComponent<CardData>();
                    if (target != null)
                        break;
                }

                if (target != null)
                {
                    Debug.Log($"–í—Ä–∞–≥ {attacker.name} –∞—Ç–∞–∫—É–µ—Ç –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É {target.name}");
                    AttackController.Instance.PerformAttack(attacker, target);
                }
                else
                {
                    Debug.Log($"–í—Ä–∞–≥ {attacker.name} –±—å–µ—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ {attacker.attack} —É—Ä–æ–Ω–∞!");
                    player.TakeDamage(attacker.attack);
                }

                attacker.hasAttackedThisTurn = true;
                hasAttackedThisTurn = true; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ –≤—Ä–∞–≥ –∞—Ç–∞–∫–æ–≤–∞–ª
                break; // –ü–æ—Å–ª–µ –æ–¥–Ω–æ–π –∞—Ç–∞–∫–∏ –≤—ã—Ö–æ–¥–∏–º
            }
        }

        Invoke(nameof(EndTurn), 1f);
    }

    public void TakeDamage(int damage)
    {
        hp -= damage;
        if (hp <= 0)
        {
            Debug.Log("–ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª!");
        }
    }

    private void EndTurn()
    {
        GameManager.Instance.EndEnemyTurn();
        Debug.Log("–í—Ä–∞–≥ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥.");
    }
}